// Code generated by counterfeiter. DO NOT EDIT.
package vaultfakes

import (
	"sync"

	"github.com/99designs/aws-vault/vault"
	"github.com/aws/aws-sdk-go/service/sso"
)

type FakeSSOClient struct {
	GetRoleCredentialsStub        func(*sso.GetRoleCredentialsInput) (*sso.GetRoleCredentialsOutput, error)
	getRoleCredentialsMutex       sync.RWMutex
	getRoleCredentialsArgsForCall []struct {
		arg1 *sso.GetRoleCredentialsInput
	}
	getRoleCredentialsReturns struct {
		result1 *sso.GetRoleCredentialsOutput
		result2 error
	}
	getRoleCredentialsReturnsOnCall map[int]struct {
		result1 *sso.GetRoleCredentialsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSSOClient) GetRoleCredentials(arg1 *sso.GetRoleCredentialsInput) (*sso.GetRoleCredentialsOutput, error) {
	fake.getRoleCredentialsMutex.Lock()
	ret, specificReturn := fake.getRoleCredentialsReturnsOnCall[len(fake.getRoleCredentialsArgsForCall)]
	fake.getRoleCredentialsArgsForCall = append(fake.getRoleCredentialsArgsForCall, struct {
		arg1 *sso.GetRoleCredentialsInput
	}{arg1})
	fake.recordInvocation("GetRoleCredentials", []interface{}{arg1})
	fake.getRoleCredentialsMutex.Unlock()
	if fake.GetRoleCredentialsStub != nil {
		return fake.GetRoleCredentialsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRoleCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSSOClient) GetRoleCredentialsCallCount() int {
	fake.getRoleCredentialsMutex.RLock()
	defer fake.getRoleCredentialsMutex.RUnlock()
	return len(fake.getRoleCredentialsArgsForCall)
}

func (fake *FakeSSOClient) GetRoleCredentialsCalls(stub func(*sso.GetRoleCredentialsInput) (*sso.GetRoleCredentialsOutput, error)) {
	fake.getRoleCredentialsMutex.Lock()
	defer fake.getRoleCredentialsMutex.Unlock()
	fake.GetRoleCredentialsStub = stub
}

func (fake *FakeSSOClient) GetRoleCredentialsArgsForCall(i int) *sso.GetRoleCredentialsInput {
	fake.getRoleCredentialsMutex.RLock()
	defer fake.getRoleCredentialsMutex.RUnlock()
	argsForCall := fake.getRoleCredentialsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSSOClient) GetRoleCredentialsReturns(result1 *sso.GetRoleCredentialsOutput, result2 error) {
	fake.getRoleCredentialsMutex.Lock()
	defer fake.getRoleCredentialsMutex.Unlock()
	fake.GetRoleCredentialsStub = nil
	fake.getRoleCredentialsReturns = struct {
		result1 *sso.GetRoleCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSOClient) GetRoleCredentialsReturnsOnCall(i int, result1 *sso.GetRoleCredentialsOutput, result2 error) {
	fake.getRoleCredentialsMutex.Lock()
	defer fake.getRoleCredentialsMutex.Unlock()
	fake.GetRoleCredentialsStub = nil
	if fake.getRoleCredentialsReturnsOnCall == nil {
		fake.getRoleCredentialsReturnsOnCall = make(map[int]struct {
			result1 *sso.GetRoleCredentialsOutput
			result2 error
		})
	}
	fake.getRoleCredentialsReturnsOnCall[i] = struct {
		result1 *sso.GetRoleCredentialsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSSOClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRoleCredentialsMutex.RLock()
	defer fake.getRoleCredentialsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSSOClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ vault.SSOClient = new(FakeSSOClient)
